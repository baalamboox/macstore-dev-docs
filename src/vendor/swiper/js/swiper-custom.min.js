class SwiperCustom {
    constructor({
        swiperNameClass = "",
        slidesPerView = 0,
        spaceBetween = 0,
        loop = false,
        breakPoints = {},
        enableEventOn = false,
        enablePaginationEl = false,
    }) {
        this.swiperNameClass = swiperNameClass;
        this.slidesPerView = slidesPerView;
        this.spaceBetween = spaceBetween;
        this.loop = loop;
        this.breakPoints = breakPoints;
        this.enableEventOn = enableEventOn;
        this.enablePaginationEl = enablePaginationEl;

        const swiperPrevContainer = document.querySelector(`.${this.swiperNameClass}-prev-container`);
        const swiperTranslate = (swiper) => {
            if (swiper.virtualSize > swiper.width) {
                if (swiper.loopedSlides != 1) {
                    if (swiper.isEnd) {
                        swiper.slidesEl.style.transform = `translate3d(${-(swiper.virtualSize - swiper.width + (swiper.width / 2))}px, 0px, 0px)`;
                        swiper.slidesEl.style.transition = "transform 2s ease";
                    }
                    if (swiper.swipeDirection === "prev") {
                        swiper.slidesEl.style.transform = `translate3d(${(swiper.translate)}px, 0px, 0px)`;
                        swiper.slidesEl.style.transition = "transform 2s ease";
                    }
                }
            }
        }
        new Swiper(`.${this.swiperNameClass}`, {
            slidesPerView: this.slidesPerView,
            spaceBetween: this.spaceBetween,
            freeMode: true,
            updateOnWindowResize: true,
            loop: this.loop,
            keyboard: true,
            speed: 1000,

            pagination: {
                el: (this.enablePaginationEl == true) ? `.${this.swiperNameClass}-dots` : null,
                clickable: this.enablePaginationEl,
            },

            navigation: {
                nextEl: `.${this.swiperNameClass}-next`,
                prevEl: `.${this.swiperNameClass}-prev`,
            },
            breakpoints: this.breakPoints,
            on: this.enableEventOn == true && {
                init: function (swiper) {
                    swiperPrevContainer?.classList.add("swiper-macstore-prev-container-hidde");
                },
                setTranslate: function (swiper) {
                    if (swiper.isBeginning) {
                        swiperPrevContainer?.classList.remove("swiper-macstore-prev-container-show");
                    } else {
                        swiperPrevContainer?.classList.add("swiper-macstore-prev-container-show");
                    }
                    swiperTranslate(swiper);
                },
                resize: function (swiper) {
                    swiperTranslate(swiper);
                },
                navigationNext: function (swiper) {
                    if (swiper.isEnd) {
                        if (swiper.loopedSlides != 1) {
                            swiper.slidesEl.style.transform = `translate3d(${-(swiper.virtualSize - swiper.width + (swiper.width / 2))}px, 0px, 0px)`;
                            swiper.slidesEl.style.transition = "transform 2s ease";
                        }
                    }
                },
            },
        });
    }
}